Skipped applying dropout on layer_0_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_1_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_2_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_3_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_4_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_5_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_6_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_7_apply_args_0 because the dropout rate was under 0.0001.
Skipped applying dropout on layer_8_apply_input_ because the dropout rate was under 0.0001.
======================
    layer_0_W has shape (25, 3, 2, 2)
    layer_0_W_decay has shape (25, 3, 2, 2)
    layer_0_b has shape (25, 31, 31)
    layer_0_b_decay has shape (25, 31, 31)
    layer_1_W has shape (50, 25, 2, 2)
    layer_1_W_decay has shape (50, 25, 2, 2)
    layer_1_b has shape (50, 30, 30)
    layer_1_b_decay has shape (50, 30, 30)
    layer_2_W has shape (75, 50, 2, 2)
    layer_2_W_decay has shape (75, 50, 2, 2)
    layer_2_b has shape (75, 14, 14)
    layer_2_b_decay has shape (75, 14, 14)
    layer_3_W has shape (100, 75, 2, 2)
    layer_3_W_decay has shape (100, 75, 2, 2)
    layer_3_b has shape (100, 13, 13)
    layer_3_b_decay has shape (100, 13, 13)
    layer_4_W has shape (125, 100, 2, 2)
    layer_4_W_decay has shape (125, 100, 2, 2)
    layer_4_b has shape (125, 6, 6)
    layer_4_b_decay has shape (125, 6, 6)
    layer_5_W has shape (150, 125, 2, 2)
    layer_5_W_decay has shape (150, 125, 2, 2)
    layer_5_b has shape (150, 5, 5)
    layer_5_b_decay has shape (150, 5, 5)
    layer_6_W has shape (350, 150, 2, 2)
    layer_6_W_decay has shape (350, 150, 2, 2)
    layer_6_b has shape (350, 2, 2)
    layer_6_b_decay has shape (350, 2, 2)
    layer_7_W has shape (1400, 900)
    layer_7_W_decay has shape (1400, 900)
    layer_7_b has shape (900,)
    layer_7_b_decay has shape (900,)
    layer_8_W has shape (900, 10)
    layer_8_W_decay has shape (900, 10)
    layer_8_b has shape (10,)
    layer_8_b_decay has shape (10,)

(server, port, alpha, beta)
(u'127.0.0.1', 7000, 0.5, 0.5)

==== read_param_desc_from_server() ====
{u'shape': [50, 3, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_0_W'}
{u'shape': [50, 3, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_0_W_decay'}
{u'shape': [50, 1, 31, 31], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_0_b'}
{u'shape': [50, 1, 31, 31], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_0_b_decay'}
{u'shape': [100, 50, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_1_W'}
{u'shape': [100, 50, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_1_W_decay'}
{u'shape': [100, 1, 30, 30], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_1_b'}
{u'shape': [100, 1, 30, 30], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_1_b_decay'}
{u'shape': [150, 100, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_2_W'}
{u'shape': [150, 100, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_2_W_decay'}
{u'shape': [150, 1, 14, 14], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_2_b'}
{u'shape': [150, 1, 14, 14], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_2_b_decay'}
{u'shape': [200, 150, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_3_W'}
{u'shape': [200, 150, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_3_W_decay'}
{u'shape': [200, 1, 13, 13], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_3_b'}
{u'shape': [200, 1, 13, 13], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_3_b_decay'}
{u'shape': [250, 200, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_4_W'}
{u'shape': [250, 200, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_4_W_decay'}
{u'shape': [250, 1, 6, 6], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_4_b'}
{u'shape': [250, 1, 6, 6], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_4_b_decay'}
{u'shape': [300, 250, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_5_W'}
{u'shape': [300, 250, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_5_W_decay'}
{u'shape': [300, 1, 5, 5], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_5_b'}
{u'shape': [300, 1, 5, 5], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_5_b_decay'}
{u'shape': [350, 300, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_6_W'}
{u'shape': [350, 300, 2, 2], u'kind': 'CONV_FILTER_WEIGHTS', u'name': 'layer_6_W_decay'}
{u'shape': [350, 1, 2, 2], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_6_b'}
{u'shape': [350, 1, 2, 2], u'kind': 'CONV_FILTER_BIASES', u'name': 'layer_6_b_decay'}
{u'shape': [1400, 900, 1, 1], u'kind': 'FULLY_CONNECTED_WEIGHTS', u'name': 'layer_7_W'}
{u'shape': [1400, 900, 1, 1], u'kind': 'FULLY_CONNECTED_WEIGHTS', u'name': 'layer_7_W_decay'}
{u'shape': [1, 900, 1, 1], u'kind': 'FULLY_CONNECTED_BIASES', u'name': 'layer_7_b'}
{u'shape': [1, 900, 1, 1], u'kind': 'FULLY_CONNECTED_BIASES', u'name': 'layer_7_b_decay'}
{u'shape': [900, 10, 1, 1], u'kind': 'FULLY_CONNECTED_WEIGHTS', u'name': 'layer_8_W'}
{u'shape': [900, 10, 1, 1], u'kind': 'FULLY_CONNECTED_WEIGHTS', u'name': 'layer_8_W_decay'}
{u'shape': [1, 10, 1, 1], u'kind': 'FULLY_CONNECTED_BIASES', u'name': 'layer_8_b'}
{u'shape': [1, 10, 1, 1], u'kind': 'FULLY_CONNECTED_BIASES', u'name': 'layer_8_b_decay'}
==== ====

INFO:blocks.algorithms:Taking the cost gradient
INFO:blocks.algorithms:The cost gradient computation graph is built
INFO:blocks.main_loop:Entered the main loop
Read-only client skips pushing parameters to server.
Reading split parameter layer_7_W_decay from server.
The parameter read has shape : (704, 900, 1, 1)
The variable on the GPU has shape : (1400, 900)
The variable read from the GPU has shape : (1400, 900)
param_var.shape.eval() is : [1400  900]


indices = client.splits_indices[name]
[array([   4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
         15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
         26,   27,   32,   33,   34,   35,   36,   37,   38,   39,   40,
         41,   46,   47,   48,   49,   50,   56,   57,   58,   59,   74,
         75,   76,   77,   78,   98,   99,  100,  101,  140,  141,  142,
        143,  149,  150,  151,  152,  153,  158,  159,  160,  161,  162,
        168,  169,  170,  171,  172,  173,  174,  175,  176,  186,  187,
        188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
        199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
        210,  211,  212,  213,  214,  215,  216,  217,  218,  233,  234,
        235,  236,  237,  247,  248,  249,  250,  251,  261,  262,  263,
        264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
        280,  281,  282,  283,  284,  285,  286,  287,  288,  294,  295,
        296,  297,  298,  299,  300,  301,  302,  312,  313,  314,  315,
        316,  317,  318,  319,  320,  321,  336,  337,  338,  339,  340,
        341,  342,  343,  344,  359,  360,  361,  362,  363,  364,  365,
        366,  367,  387,  388,  389,  390,  391,  392,  393,  394,  395,
        406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
        417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
        428,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
        458,  459,  460,  461,  466,  467,  468,  469,  470,  471,  472,
        473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,
        484,  494,  495,  496,  497,  498,  513,  514,  515,  516,  517,
        522,  523,  524,  525,  526,  527,  528,  529,  530,  531,  583,
        584,  585,  586,  587,  592,  593,  594,  595,  596,  597,  598,
        599,  600,  601,  606,  607,  608,  609,  610,  616,  617,  618,
        619,  625,  626,  627,  628,  629,  639,  640,  641,  642,  643,
        658,  659,  660,  661,  662,  663,  664,  665,  666,  667,  668,
        669,  670,  671,  681,  682,  683,  684,  685,  695,  696,  697,
        698,  699,  700,  701,  702,  703,  704,  705,  706,  707,  708,
        718,  719,  720,  721,  722,  728,  729,  730,  731,  732,  733,
        734,  735,  736,  751,  752,  753,  754,  755,  756,  757,  758,
        759,  765,  766,  767,  768,  769,  774,  775,  776,  777,  778,
        784,  785,  786,  787,  788,  789,  790,  791,  792,  812,  813,
        814,  815,  826,  827,  828,  829,  844,  845,  846,  847,  848,
        849,  850,  851,  852,  853,  863,  864,  865,  866,  867,  877,
        878,  879,  880,  881,  886,  887,  888,  889,  890,  891,  892,
        893,  894,  895,  900,  901,  902,  903,  904,  905,  906,  907,
        908,  909,  914,  915,  916,  917,  918,  919,  920,  921,  922,
        923,  928,  929,  930,  931,  932,  933,  934,  935,  936,  937,
        938,  939,  940,  941,  942,  943,  944,  945,  946,  952,  953,
        954,  955,  961,  962,  963,  964,  965,  966,  967,  968,  969,
        970,  971,  972,  973,  974,  975,  976,  977,  978,  979,  989,
        990,  991,  992,  993,  994,  995,  996,  997, 1012, 1013, 1014,
       1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1027, 1028, 1029,
       1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
       1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
       1052, 1053, 1054, 1055, 1056, 1057, 1058, 1064, 1065, 1066, 1067,
       1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1082,
       1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
       1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
       1105, 1129, 1130, 1131, 1132, 1133, 1148, 1149, 1150, 1151, 1166,
       1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1190, 1191,
       1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
       1203, 1208, 1209, 1210, 1211, 1212, 1218, 1219, 1220, 1221, 1227,
       1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1246, 1247, 1248,
       1249, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1269,
       1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1283, 1284, 1285,
       1286, 1287, 1288, 1289, 1290, 1291, 1302, 1303, 1304, 1305, 1306,
       1307, 1308, 1309, 1310, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
       1323, 1324, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
       1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
       1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
       1375, 1381, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1393, 1394], dtype=int32), array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
       273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
       286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
       299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
       312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
       325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
       338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
       351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
       364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
       377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
       390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
       403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
       416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
       429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
       442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
       455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
       468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
       481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
       494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
       507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
       520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
       533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
       546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
       559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
       572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
       585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
       598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
       611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
       624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
       637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
       650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
       663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
       676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
       689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
       702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
       715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
       728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
       741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
       754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
       767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
       780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
       793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
       806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
       819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
       832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
       845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
       858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
       871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
       884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
       897, 898, 899], dtype=int32)]
indices[0].shape : (704,)
indices[1].shape : (900,)
param_desc = client.get_param_desc(name)
{u'shape': [1400, 900, 1, 1], u'kind': 'FULLY_CONNECTED_WEIGHTS', u'name': 'layer_7_W_decay'}
ERROR:blocks.main_loop:Error occured during training.

Blocks will attempt to run `on_error` extensions, potentially saving data, before exiting and reraising the error. Note that the usual `after_training` extensions will *not* be run. The original error will be re-raised and also stored in the training log. Press CTRL + C to halt Blocks immediately.
Traceback (most recent call last):
  File "voltmeleon_run.py", line 115, in <module>
    main(sys.argv)
  File "voltmeleon_run.py", line 110, in main
    run(experiment_dir, output_server_params_desc_path=output_server_params_desc_path, want_observer_mode=want_observer_mode, running_on_helios=running_on_helios)
  File "voltmeleon_run.py", line 70, in run
    client_runner.run(model_desc, train_desc, experiment_dir, saving_path, output_server_params_desc_path=output_server_params_desc_path)
  File "/home/dpln/NIPS/voltmeleon/voltmeleon/client_runner.py", line 295, in run
    main_loop.run()
  File "/home/dpln/deep-learning-suite/blocks/blocks/main_loop.py", line 188, in run
    reraise_as(e)
  File "/home/dpln/deep-learning-suite/blocks/blocks/utils/__init__.py", line 225, in reraise_as
    six.reraise(type(new_exc), new_exc, orig_exc_traceback)
  File "/home/dpln/deep-learning-suite/blocks/blocks/main_loop.py", line 162, in run
    self._run_extensions('before_training')
  File "/home/dpln/deep-learning-suite/blocks/blocks/main_loop.py", line 253, in _run_extensions
    extension.dispatch(CallbackName(method_name), *args)
  File "/home/dpln/deep-learning-suite/blocks/blocks/extensions/__init__.py", line 330, in dispatch
    self.do(callback_invoked, *(from_main_loop + tuple(arguments)))
  File "/home/dpln/NIPS/voltmeleon/voltmeleon/server_sync_extensions.py", line 176, in do
    param_var.set_value(param_value.reshape(shape))
ValueError: total size of new array must be unchanged

Original exception:
        ValueError: total size of new array must be unchanged
d
